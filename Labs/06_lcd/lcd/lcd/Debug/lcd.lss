
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  00000438  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116d  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096f  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f8  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f8  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000356b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_gotoxy>:
 118:	61 11       	cpse	r22, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_gotoxy+0xc>
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 122:	08 95       	ret
 124:	80 54       	subi	r24, 0x40	; 64
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_clrscr>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_putc>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_puts>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <lcd_puts+0x1a>
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <lcd_puts+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 160:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 162:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 164:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 166:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 168:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 16a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 16c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x1c>
 178:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 17a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 17c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x30>
 18c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x38>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	85 e1       	ldi	r24, 0x15	; 21
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x44>
 1a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ac:	95 e1       	ldi	r25, 0x15	; 21
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x52>
 1b2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
    lcd_puts("00:00.0");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(12, 0);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
    lcd_putc('a');
 1f2:	81 e6       	ldi	r24, 0x61	; 97
 1f4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
	lcd_gotoxy(1, 1);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_putc('b');
 200:	82 e6       	ldi	r24, 0x62	; 98
 202:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
	lcd_gotoxy(12, 1);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_putc('c');
 20e:	83 e6       	ldi	r24, 0x63	; 99
 210:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms


    // Enables interrupts by setting the global interrupt mask
    sei();
 214:	78 94       	sei
 216:	ff cf       	rjmp	.-2      	; 0x216 <main+0x42>

00000218 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <__vector_9+0x28>
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	90 e2       	ldi	r25, 0x20	; 32
 248:	9a 83       	std	Y+2, r25	; 0x02
 24a:	89 83       	std	Y+1, r24	; 0x01

    number_of_overflows++;
 24c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <number_of_overflows.1946>
 250:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	18 f4       	brcc	.+6      	; 0x25c <__vector_9+0x44>
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()

    number_of_overflows++;
 256:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <number_of_overflows.1946>
 25a:	52 c0       	rjmp	.+164    	; 0x300 <__vector_9+0xe8>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 25c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <number_of_overflows.1946>

		if(tens==9)
 260:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tens.1947>
 264:	89 30       	cpi	r24, 0x09	; 9
 266:	41 f4       	brne	.+16     	; 0x278 <__vector_9+0x60>
			{
				tens=0;	
 268:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tens.1947>
				secs++;
 26c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 276:	03 c0       	rjmp	.+6      	; 0x27e <__vector_9+0x66>
			}
		else
			tens++;
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tens.1947>
		lcd_gotoxy(1, 0);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("00");
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(3, 0);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_putc(':');
 296:	8a e3       	ldi	r24, 0x3A	; 58
 298:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 29c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	be 01       	movw	r22, r28
 2a4:	6f 5f       	subi	r22, 0xFF	; 255
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 95 01 	call	0x32a	; 0x32a <__itoa_ncheck>
		itoa(secs, lcd_string, 10);
		if(secs<10)
 2ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2b2:	8a 30       	cpi	r24, 0x0A	; 10
 2b4:	28 f4       	brcc	.+10     	; 0x2c0 <__vector_9+0xa8>
		lcd_gotoxy(5, 0);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <__vector_9+0xb0>
		else
		lcd_gotoxy(4, 0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts(lcd_string);
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(6, 0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_putc('.');
 2d8:	8e e2       	ldi	r24, 0x2E	; 46
 2da:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 2de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tens.1947>
 2e2:	4a e0       	ldi	r20, 0x0A	; 10
 2e4:	be 01       	movw	r22, r28
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 95 01 	call	0x32a	; 0x32a <__itoa_ncheck>
		itoa(tens, lcd_string, 10);
		lcd_gotoxy(7, 0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts(lcd_string);
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
   }
}
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__itoa_ncheck>:
 32a:	bb 27       	eor	r27, r27
 32c:	4a 30       	cpi	r20, 0x0A	; 10
 32e:	31 f4       	brne	.+12     	; 0x33c <__itoa_ncheck+0x12>
 330:	99 23       	and	r25, r25
 332:	22 f4       	brpl	.+8      	; 0x33c <__itoa_ncheck+0x12>
 334:	bd e2       	ldi	r27, 0x2D	; 45
 336:	90 95       	com	r25
 338:	81 95       	neg	r24
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__utoa_common>

00000340 <__utoa_ncheck>:
 340:	bb 27       	eor	r27, r27

00000342 <__utoa_common>:
 342:	fb 01       	movw	r30, r22
 344:	55 27       	eor	r21, r21
 346:	aa 27       	eor	r26, r26
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	aa 1f       	adc	r26, r26
 34e:	a4 17       	cp	r26, r20
 350:	10 f0       	brcs	.+4      	; 0x356 <__utoa_common+0x14>
 352:	a4 1b       	sub	r26, r20
 354:	83 95       	inc	r24
 356:	50 51       	subi	r21, 0x10	; 16
 358:	b9 f7       	brne	.-18     	; 0x348 <__utoa_common+0x6>
 35a:	a0 5d       	subi	r26, 0xD0	; 208
 35c:	aa 33       	cpi	r26, 0x3A	; 58
 35e:	08 f0       	brcs	.+2      	; 0x362 <__utoa_common+0x20>
 360:	a9 5d       	subi	r26, 0xD9	; 217
 362:	a1 93       	st	Z+, r26
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	79 f7       	brne	.-34     	; 0x346 <__utoa_common+0x4>
 368:	b1 11       	cpse	r27, r1
 36a:	b1 93       	st	Z+, r27
 36c:	11 92       	st	Z+, r1
 36e:	cb 01       	movw	r24, r22
 370:	0c 94 ba 01 	jmp	0x374	; 0x374 <strrev>

00000374 <strrev>:
 374:	dc 01       	movw	r26, r24
 376:	fc 01       	movw	r30, r24
 378:	67 2f       	mov	r22, r23
 37a:	71 91       	ld	r23, Z+
 37c:	77 23       	and	r23, r23
 37e:	e1 f7       	brne	.-8      	; 0x378 <strrev+0x4>
 380:	32 97       	sbiw	r30, 0x02	; 2
 382:	04 c0       	rjmp	.+8      	; 0x38c <strrev+0x18>
 384:	7c 91       	ld	r23, X
 386:	6d 93       	st	X+, r22
 388:	70 83       	st	Z, r23
 38a:	62 91       	ld	r22, -Z
 38c:	ae 17       	cp	r26, r30
 38e:	bf 07       	cpc	r27, r31
 390:	c8 f3       	brcs	.-14     	; 0x384 <strrev+0x10>
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
